
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, END
import tkinter as tk
from tkinter.scrolledtext import ScrolledText

import os
import random
import numpy

current_file_path = os.path.abspath(__file__)  # Đường dẫn đầy đủ của file hiện tại
current_dir = os.path.dirname(current_file_path)  # Thư mục chứa file hiện tại

# Đường dẫn tới assets/chinhSuaGiaoDich
assets_path = os.path.join(current_dir, "./assets/frame0")
normalized_path = os.path.normpath(assets_path)  # Chuẩn hóa đường dẫn

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(normalized_path)


#
import solve_puz8_module as solver
import time
from algorithm.BFS import bfs_and_generation_data, BFS
from openBrower import open_view
from tree_generation.tree_generation import generation


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def generate_random_board_string():
    numbers = list("012345678")
    random.shuffle(numbers)  # Trộn ngẫu nhiên
    return "".join(numbers)

def create_frame(go_to, window, update_solver_path):
    # window = Tk()

    # window.geometry("807x457")
    # window.configure(bg = "#A0BFF4")
    frame = Frame(window, bg="#A0BFF4", width=807, height=457)
    frame.path = [[[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]], [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]]

    frame.canvas = Canvas(
        frame,
        bg = "#A0BFF4",
        height = 457,
        width = 807,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    frame.canvas.place(x = 0, y = 0)
    frame.canvas.create_rectangle(
        0.0,
        0.0,
        90.0,
        457.0,
        fill="#233565",
        outline="")

    frame.canvas.create_rectangle(
        112.0,
        230.0,
        787.0,
        441.0,
        fill="#FDFDFD",
        outline="")

    frame.canvas.create_rectangle(
        6.0,
        186.0,
        84.0,
        219.0,
        fill="#D9D9D9",
        outline="")

    frame.canvas.create_rectangle(
        90.0,
        0.0,
        807.0,
        25.0,
        fill="#717273",
        outline="")

    frame.button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    frame.button_1 = Button(
        frame,
        image=frame.button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_1 clicked"),
        relief="flat"
    )
    frame.button_1.place(
        x=6.0,
        y=60.0,
        width=78.0,
        height=33.0
    )

    frame.button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    frame.button_2 = Button(
        frame,
        image=frame.button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: bfs_solve_only(),
        relief="flat"
    )
    frame.button_2.place(
        x=709.0,
        y=186.0,
        width=78.0,
        height=33.0
    )

    frame.button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    frame.button_3 = Button(
        frame,
        image=frame.button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: view(),
        relief="flat"
    )
    frame.button_3.place(
        x=709.0,
        y=44.0,
        width=78.0,
        height=33.0
    )

    frame.button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    frame.button_4 = Button(
        frame,
        image=frame.button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: get_random_board(),
        relief="flat"
    )
    frame.button_4.place(
        x=315.0,
        y=43.0,
        width=78.0,
        height=33.0
    )

    frame.button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    frame.button_5 = Button(
        frame,
        image=frame.button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: go_to("dfs"),
        relief="flat"
    )
    frame.button_5.place(
        x=6.0,
        y=102.0,
        width=78.0,
        height=33.0
    )

    frame.button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    frame.button_6 = Button(
        frame,
        image=frame.button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: go_to("ids"),
        relief="flat"
    )
    frame.button_6.place(
        x=6.0,
        y=144.0,
        width=78.0,
        height=33.0
    )

    frame.canvas.create_text(
        415.0,
        5.0,
        anchor="nw",
        text="BFS",
        fill="#FFFFFF",
        font=("Inter", 12 * -1)
    )

    frame.entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    frame.entry_bg_1 = frame.canvas.create_image(
        211.0,
        59.5,
        image=frame.entry_image_1
    )
    frame.entry_1 = Entry(
        frame,
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0
    )
    frame.entry_1.place(
        x=112.0,
        y=42.0,
        width=198.0,
        height=33.0
    )

    frame.entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    frame.entry_bg_2 = frame.canvas.create_image(
        302.5,
        123.0,
        image=frame.entry_image_2
    )
    frame.entry_2 = Entry(
        frame,
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        # state="readonly"
    )
    frame.entry_2.place(
        x=251.0,
        y=114.0,
        width=103.0,
        height=16.0
    )

    frame.entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    frame.entry_bg_3 = frame.canvas.create_image(
        301.5,
        153.0,
        image=frame.entry_image_3
    )
    frame.entry_3 = Entry(
        frame,
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        # state="readonly"
    )
    frame.entry_3.place(
        x=250.0,
        y=144.0,
        width=103.0,
        height=16.0
    )

    frame.canvas.create_text(
        111.0,
        114.0,
        anchor="nw",
        text="Visited Nodes:",
        fill="#000000",
        font=("Inter", 12 * -1)
    )

    frame.canvas.create_text(
        111.0,
        144.0,
        anchor="nw",
        text="Solved Path Length:",
        fill="#000000",
        font=("Inter", 12 * -1)
    )

    frame.entry_image_4 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    frame.entry_bg_4 = frame.canvas.create_image(
        302.5,
        183.0,
        image=frame.entry_image_4
    )
    frame.entry_4 = Entry(
        frame,
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        # state="readonly"
    )
    frame.entry_4.place(
        x=251.0,
        y=174.0,
        width=103.0,
        height=16.0
    )

    frame.canvas.create_text(
        112.0,
        174.0,
        anchor="nw",
        text="Solved Time (s):",
        fill="#000000",
        font=("Inter", 12 * -1)
    )

    frame.button_image_7 = PhotoImage(
        file=relative_to_assets("button_7.png"))
    frame.button_7 = Button(
        frame,
        image=frame.button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: go_to("aStar"),
        relief="flat"
    )
    frame.button_7.place(
        x=7.0,
        y=186.0,
        width=78.0,
        height=33.0
    )

    frame.button_image_8 = PhotoImage(
        file=relative_to_assets("button_8.png"))
    frame.button_8 = Button(
        frame,
        image=frame.button_image_8,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: go_to("greedy"),
        relief="flat"
    )
    frame.button_8.place(
        x=8.0,
        y=229.0,
        width=78.0,
        height=33.0
    )

    frame.button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))
    frame.button_9 = Button(
        frame,
        image=frame.button_image_9,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: go_to("idaStar"),
        relief="flat"
    )
    frame.button_9.place(
        x=8.0,
        y=272.0,
        width=78.0,
        height=33.0
    )




    # Xử lý khi nhấn nút giải
    frame.text_1 = ScrolledText(
        frame,
        bd=0,
        bg="#000000",
        fg="#00FF00",
        highlightthickness=0
    )
    frame.text_1.place(
        x=112.0,
        y=231.0,
        width=675.0,
        height=209.0
    )


    
    def bfs_solve_only():
        input_board_string = frame.entry_1.get()
        # Check có hợp lệ
        if not (len(input_board_string) == 9 and set(input_board_string) == set("012345678")):
            print("Bảng không hợp lệ.")
            return
        
        input_board_array = list(map(int, input_board_string))
        i00, i01, i02, i10, i11, i12, i20, i21, i22 = input_board_array 
        root = numpy.array(((i00, i01, i02), (i10, i11, i12), (i20, i21, i22)))

        # 
        frame.text_1.delete("1.0", END)
        frame.text_1.insert("1.0", "Giải với BFS:\n")

        # Xóa các Entry ghi thông tin
        frame.entry_2.delete(0, END)
        frame.entry_3.delete(0, END)
        frame.entry_4.delete(0, END)

        start_time = time.perf_counter()
        rs = BFS(root)
        end_time = time.perf_counter()
        elapsed_time = end_time - start_time # Thời gian tính toán

        frame.text_1.delete("1.0", "end") 
        if rs:
            path, info = rs
            
            # Thêm các thông tin 
            frame.entry_2.insert(0, str(info["visited"]))
            frame.entry_3.insert(0, str(info["path_len"]))
            frame.entry_4.insert(0, str(elapsed_time))

            # Ghi thông tin giải lên Text Area
            i = 0
            for node in path:
                frame.text_1.insert("end", str(i) + ". " + str(node) + "\n")
                i += 1
        else:
            # Không thể giải
            frame.text_1.insert("end", "Không có lời giải!" + "\n")
            frame.entry_4.insert(0, str(elapsed_time))


    def view():
        input_board_string = frame.entry_1.get()
        # Check có hợp lệ
        if not (len(input_board_string) == 9 and set(input_board_string) == set("012345678")):
            print("Bảng không hợp lệ.")
            return
        
        input_board_array = list(map(int, input_board_string))
        i00, i01, i02, i10, i11, i12, i20, i21, i22 = input_board_array 
        root = numpy.array(((i00, i01, i02), (i10, i11, i12), (i20, i21, i22)))

        # Xóa các Entry ghi thông tin
        frame.entry_2.delete(0, END)
        frame.entry_3.delete(0, END)
        frame.entry_4.delete(0, END)

        start_time = time.perf_counter()
        rs = BFS(root)
        end_time = time.perf_counter()
        elapsed_time = end_time - start_time # Thời gian tính toán

        # 
        path, info, dataMap = bfs_and_generation_data(root)

        frame.text_1.delete("1.0", "end")
        if path == "fail":
            # Không thể giải
            frame.text_1.insert("end", "Không có lời giải!" + "\n")
            frame.entry_4.insert(0, str(elapsed_time))
        else:
            # Thêm các thông tin 
            frame.entry_2.insert(0, str(info["visited"]))
            frame.entry_3.insert(0, str(info["path_len"]))
            frame.entry_4.insert(0, str(elapsed_time))

            # Ghi thông tin giải lên Text Area
            i = 0
            for node in path:
                frame.text_1.insert("end", str(i) + ". " + str(node) + "\n")
                i += 1

        # Tạo map và mở lên 
        t = generation()
        if t:
            open_view()

    def get_random_board():
        frame.entry_1.delete(0, END)
        frame.entry_1.insert(0, generate_random_board_string()) 



    
    return frame





